import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        int counter = 0;
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        int sum = 0;
        double avg = 0;
        ArrayList<Integer> numList = new ArrayList<>();

        try {
            File myObj = new File("hw3_datafile.txt");
            Scanner myReader = new Scanner(myObj);
            while (myReader.hasNextLine()) {
                counter++;
                int number = myReader.nextInt();
                sum += number;

                if (number < min) {
                    min = number;
                }
                if (number > max) {
                    max = number;
                }
            }
            avg = Math.round((sum * 1.0) / counter);
            myReader.close();
        } catch (FileNotFoundException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }

        try {
            File output = new File("dataAnalysis.txt");
            if (output.createNewFile()) {
                System.out.println("You have created file: " + output.getName());
            } else {
                System.out.println("Sorry! This file already exists.");
            }
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }


        try {
            File myObj2 = new File("hw3_datafile.txt");
            Scanner outScan = new Scanner(myObj2);

            FileWriter outWrite = new FileWriter("dataAnalysis.txt");
            outWrite.write("There are " + counter + " Lines within this file \n");
            outWrite.write("The smallest number within that file is " + min + "\n");
            outWrite.write("The largest number within that file is " + max + "\n");
            outWrite.write("The total sum of all the numbers combined is " + sum + "\n" );
            outWrite.write("The average of all the numbers combined is " + avg + "\n\n");
            outWrite.write("--- The following are the contents of our input file --- \n\n");
            Integer obj = outScan.nextInt();
            while(outScan.hasNextLine()) {
                numList.add(obj);
                obj = outScan.nextInt();
            }
            Collections.sort(numList);

            for(int i = 0; i < numList.size() ; i++) {
                Integer data = numList.get(i);

                outWrite.write(" " + data);
                if(i % 10 == 0 && i > 0)
                    outWrite.write("\n");
            }
            outWrite.close();
            System.out.println("Successfully wrote to the file.");
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }



    }

}







hw3_datafile.txt

438
963
513
697
346
136
890
491
423
361
903
594
501
814
20
91
401
354
41
441
555
946
176
490
776
254
103
611
774
751
157
800
646
778
451
464
247
427
327
633
401
710
497
168
822
777
392
44
104
894
645
692
959
640
363
661
449
92
804
208
599
98
224
124
102
468
914
432
771
175
859
939
915
31
27
832
954
463
836
508
394
385
490
394
942
19
672
9
871
596
613
404
495
949
199
546
860
826
414
559
767
419
716
531
958
6
947
410
615
208
161
483
694
516
400
732
913
211
144
303
785
653
984
862
124
878
546
868
177
204
392
487
507
144
516
896
26
803
876
477
342
59
485
802
397
303
663
339
935
751
130
213
209
247
999
230
199
333
42
953
117
441
446
302
311
669
114
122
119
381
123
755
327
937
242
431
400
945
727
294
194
48
526
476
357
83
433
371
88
476
238
801
175
706
875
614
690
27
447
825
972
725
698
483
578
170
872
100
333
738
969
660
688
453
541
893
486
657
759
599
510
800
999
708
353
118
132
174
742
354
226
757
59
611
232
813
758
957
661
903
100
467
693
183
843
423
926
630
283
488
72
977
307
979
804
570
689
126
139
486
913
961
243
502
586
534
126
417
420
674
211
74
807
940
129
590
433
589
513
921
246
353
236
713
437
325
837
115
888
433
207
733
772
33
370
940
802
86
867
111
165
106
897
604
828
524
975
57
587
992
911
597
837
587
203
768
213
326
666
672
694
1000
345
853
542
929
720
856
618
44
943
231
783
141
408
852
509
540
782
512
552
776
39
322
722
783
158
84
835
573
636
863
354
347
256
229
33
882
20
792
756
48
466
26
882
610
511
780
232
171
639
259
234
260
897
359
603
21
980
518
854
834
634
217
86
249
36
157
403
299
774
429
902
225
781
494
192
218
982
411
46
786
953
658
351
940
261
502
688
476
173
142
944
518
628
791
608
971
245
221
238
461
31
280
482
424
855
316
95
76
446
601
806
848
364
213
744
650
452
214
387
508
474
781
663
441
363
239
609
872
604
150
168
56
918
919
422
125
656
925
560
705
301
574
106
310
976
412
677
163
405
719
611
342
242
937
924
58
430
819
281
265
528
190
249
179
107
524
619
223
9
895
675
496
30
850
736
380
750
959
462
666
761
377
543
154
837
332
223
234
661
849
88
789
594
734
355
566
47
869
8
942
969
324
416
250
886
317
529
593
877
7
298
445
79
613
568
447
476
132
480
704
737
19
693
573
72
462
548
362
569
28
727
299
752
987
343
943
207
695
517
206
709
690
811
964
391
449
574
446
374
491
198
149
649
312
34
537
396
199
174
351
209
440
414
798
735
643
903
654
872
769
772
266
527
826
135
328
41
206
720
703
371
8
771
352
933
79
781
624
462
519
231
188
888
377
446
966
525
502
666
640
305
921
565
614
538
981
367
817
990
108
136
257
772
499
405
506
902
506
575
266
556
680
376
474
533
942
703
356
354
219
550
564
243
368
674
345
414
869
418
814
669
908
916
172
272
995
501
211
483
72
328
992
432
689
312
449
152
73
801
79
918
434
364
731
501
927
377
812
220
488
90
112
126
956
197
537
567
978
43
242
844
161
687
514
234
465
401
224
297
305
627
968
74
235
35
548
671
476
923
927
947
984
301
446
186
974
83
1000
441
143
598
479
233
685
38
408
336
682
121
87
65
238
503
414
373
926
309
136


dataAnalysis.txt (output)

Total number of lines in a file: 750
The lowest number is: 6
The largest number is:  1000
The total of all numbers combined is: 374434
The average of all numbers is: 499.0
The median of all numbers is: 730.0

Below is a display of all numbers found in the hw3_numbers.text file: 

6 7 8 8 9 9 19 19 20 20 21 26 26 27 27 28 
30 31 31 33 33 34 35 36 38 39 41 41 42 43 44 
44 46 47 48 48 56 57 58 59 59 65 72 72 72 73 
74 74 76 79 79 79 83 83 84 86 86 87 88 88 90 
91 92 95 98 100 100 102 103 104 106 106 107 108 111 112 
114 115 117 118 119 121 122 123 124 124 125 126 126 126 129 
130 132 132 135 136 136 136 139 141 142 143 144 144 149 150 
152 154 157 157 158 161 161 163 165 168 168 170 171 172 173 
174 174 175 175 176 177 179 183 186 188 190 192 194 197 198 
199 199 199 203 204 206 206 207 207 208 208 209 209 211 211 
211 213 213 213 214 217 218 219 220 221 223 223 224 224 225 
226 229 230 231 231 232 232 233 234 234 234 235 236 238 238 
238 239 242 242 242 243 243 245 246 247 247 249 249 250 254 
256 257 259 260 261 265 266 266 272 280 281 283 294 297 298 
299 299 301 301 302 303 303 305 305 307 309 310 311 312 312 
316 317 322 324 325 326 327 327 328 328 332 333 333 336 339 
342 342 343 345 345 346 347 351 351 352 353 353 354 354 354 
354 355 356 357 359 361 362 363 363 364 364 367 368 370 371 
371 373 374 376 377 377 377 380 381 385 387 391 392 392 394 
394 396 397 400 400 401 401 401 403 404 405 405 408 408 410 
411 412 414 414 414 414 416 417 418 419 420 422 423 423 424 
427 429 430 431 432 432 433 433 433 434 437 438 440 441 441 
441 441 445 446 446 446 446 446 447 447 449 449 449 451 452 
453 461 462 462 462 463 464 465 466 467 468 474 474 476 476 
476 476 476 477 479 480 482 483 483 483 485 486 486 487 488 
488 490 490 491 491 494 495 496 497 499 501 501 501 502 502 
502 503 506 506 507 508 508 509 510 511 512 513 513 514 516 
516 517 518 518 519 524 524 525 526 527 528 529 531 533 534 
537 537 538 540 541 542 543 546 546 548 548 550 552 555 556 
559 560 564 565 566 567 568 569 570 573 573 574 574 575 578 
586 587 587 589 590 593 594 594 596 597 598 599 599 601 603 
604 604 608 609 610 611 611 611 613 613 614 614 615 618 619 
624 627 628 630 633 634 636 639 640 640 643 645 646 649 650 
653 654 656 657 658 660 661 661 661 663 663 666 666 666 669 
669 671 672 672 674 674 675 677 680 682 685 687 688 688 689 
689 690 690 692 693 693 694 694 695 697 698 703 703 704 705 
706 708 709 710 713 716 719 720 720 722 725 727 727 731 732 
733 734 735 736 737 738 742 744 750 751 751 752 755 756 757 
758 759 761 767 768 769 771 771 772 772 772 774 774 776 776 
777 778 780 781 781 781 782 783 783 785 786 789 791 792 798 
800 800 801 801 802 802 803 804 804 806 807 811 812 813 814 
814 817 819 822 825 826 826 828 832 834 835 836 837 837 837 
843 844 848 849 850 852 853 854 855 856 859 860 862 863 867 
868 869 869 871 872 872 872 875 876 877 878 882 882 886 888 
888 890 893 894 895 896 897 897 902 902 903 903 903 908 911 
913 913 914 915 916 918 918 919 921 921 923 924 925 926 926 
927 927 929 933 935 937 937 939 940 940 940 942 942 942 943 
943 944 945 946 947 947 949 953 953 954 956 957 958 959 959 
961 963 964 966 968 969 969 971 972 974 975 976 977 978 979 
980 981 982 984 984 987 990 992 992 995 999 999 1000 1000 
